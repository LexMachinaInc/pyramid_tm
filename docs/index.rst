pyramid_tm
==========

Overview
--------

``pyramid_tm`` is a package which allows :term:`Pyramid` requests to join
the active :term:`transaction` as provided by the :term:`transaction` package.

Installation
------------

Install using setuptools, e.g. (within a virtualenv)::

  $ easy_install pyramid_tm

Setup
-----

Once ``pyramid_tm`` is installed, you must use the ``config.include``
mechanism to include it into your Pyramid project's configuration.  In your
Pyramid project's ``__init__.py``:

.. code-block:: python
   :linenos:

   config = Configurator(.....)
   config.include('pyramid_tm')

From now on, whenever a new request is setup from an application using
``config``, a new transaction is associated with that request.

.. note::

   When the ``repoze.tm`` or ``repoze.tm2`` middleware is in the WSGI
   pipeline, ``pyramid_tm`` becomes inactive.

:term:`transaction` Usage
-------------------------

At the beginning of a request a new :term:`transaction` is started
using the ``transaction.begin()`` function.  Once the request has
finished all of it's works (ie views have finished running), a few checks
are tested:

  1) Did some a transaction.doom() cause the transaction to become "doomed"?
     if so, ``transaction.abort()``.

  2) Did an exception occur in the underlying code? if so,
     ``transaction.abort()``

  3) Did the :func:`pyramid.tm.default_commit_veto` callback, called with the
     response generated by the application, return a result that evaluates to
     ``True``? if so, ``transaction.abort()``.  The default commit veto
     vetoes a commit if the status code starts with ``4`` or ``5`` or there
     is a ``X-Tm`` response header with a value that does not equal
     ``commit``.

If none of these checks calls ``transaction.abort()`` then the transaction is
instead committed using ``transaction.commit()``.

By itself, this :term:`transaction` machinery doesn't do much.  It is up to
third-party code to *join* the active transaction to benefit.

See `repoze.filesafe <http://pypi.python.org/pypi/repoze.filesafe>`_ for an
example of how files creation can be committed or rolled back based on
:term:`transaction` and the `pyramid_mailer
<http://docs.pylonsproject.org/projects/pyramid_mailer/dev/>`_ package to see
how you can prevent emails from being sent until a transaction succeeeds.

Replacing the Default Commit Veto
---------------------------------

Pyramid's default "commit veto" logic looks something like this:

.. code-block:: python
   :linenos:

   def default_commit_veto(request, response):
       xtm = response.headers.get('x-tm')
       if xtm is not None:
           if xtm == 'commit':
               return False
           return True
       status = response.status
       for bad in ('4', '5'):
           if status.startswith(bad):
               return True
       return False

This code is present in the ``pyramid_tm`` package as
``pyramid_tm.default_commit_veto``.  If you do not specify a custom commit
veto function, this logic is used.

If you'd like to replace the default "commit veto" callback, create a
function with the same signature (``request``, ``response``) and return value
(``True`` or ``False``), then pass a ``pyramid_tm.commit_veto`` setting to
your :term:`Configurator`.

Via Python:

.. code-block:: python
   :linenos:

   from pyramid.config import Configurator

   def app(global_conf, settings):
       settings['pyramid_tm.commit_veto'] = commit_veto
       config = Configurator(settings=settings)
       config.include('pyramid_tm')

Via PasteDeploy:

.. code-block:: ini
   :linenos:

   [app:myapp]
   pyramid_tm.commit_veto = my.package.commit_veto

In the PasteDeploy example, the path is a Python dotted name, where the dots
separate module and package names, and the colon separates a module from its
contents.  In the above example, the code would be implemented as a
"commit_veto" function which lives in the "package" submodule of the "my"
package.

To run without a commit veto function, pass the empty string or the value
``None`` as the ``pyramid_tm.commit_veto`` setting.

Retrying
--------

When the transaction manager calls the downstream handler, if the handler
raises a "retryable" exception, the transaction manager will attempt to call
the downstream handler again with the same request.  If the second attempt
fails, and the downstream handler again raise a retryable error, the
transaction manager will try the request again one more time.  If the third
attempt fails, the "retryable" exception will be raised to its caller.

Retryable exceptions include ```ZODB.POSException.ConflictError``, and
certain exceptions raised by various data managers, such as
``psycopg2.extensions.TransactionRollbackError``, ``cx_Oracle.DatabaseError``
(where the exception's code is 8877).  Any exception which inherits from
``transaction.interfaces.TransientError`` will be treated with retry
behavior.

To change the default number of attempts used during retry (from 3 to
something higher or lower, but at least must be 1), use the
``pyramid_tm.attempts`` configuration setting.

Explicit Tween Configuration
----------------------------

Note that the transaction manager is a Pyramid "tween", and it can be used in
the explicit tween list if its implicit position in the tween chain is
incorrect (see the output of ``paster ptweens``)::

   [app:myapp]
   pyramid.tweens = someothertween
                    pyramid.tweens.excview_tween_factory
                    pyramid_tm.tm_tween_factory

It usually belongs directly above the "MAIN" entry in the ``paster ptweens``
output, and will attempt to sort there by default as the result of having
``include('pyramid_tm')`` invoked.

More Information
----------------

.. toctree::
   :maxdepth: 1

   api.rst
   glossary.rst


Reporting Bugs / Development Versions
-------------------------------------

Visit http://github.com/Pylons/pyramid_tm to download development or
tagged versions.

Visit http://github.com/Pylons/pyramid_tm/issues to report bugs.

Indices and tables
------------------

* :ref:`glossary`
* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
